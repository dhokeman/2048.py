Name-Manan Dhoke
github id-dhokeman
IV Labs Submission

"2048"- DESCRIPTION ABOUT THE GAME:
2048 is a single-player sliding block puzzle game . The game's objective is to slide numbered tiles on a grid to combine them to create a tile with the number 2048.
However, one can continue to play the game after reaching the goal, creating tiles with larger numbers.
2048 is played on a gray 4×4 grid, with numbered tiles that slide smoothly when a player moves them using the four arrow keys.
Every turn, a new tile will randomly appear in an empty spot on the board with a value of either 2 or 4.
Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid.
If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided. The resulting tile cannot merge with another tile again in the same move.
If a move causes three consecutive tiles of the same value to slide together, only the two tiles farthest along the direction of motion will combine. 
If all four spaces in a row or column are filled with tiles of the same value, a move parallel to that row/column will combine the first two and last two.
The game is won when a tile with a value of 2048 appears on the board, hence the name of the game. After reaching the 2048 tile, players can continue to play (beyond the 2048 tile) to reach higher scores.
When the player has no legal moves (there are no empty spaces and no adjacent tiles with the same value), the game ends. 
The game can only last a finite amount of moves, and the theoretical limit for the highest tile on a standard 4x4 board is 131,072.

DESCRIPTION ABOUT THE CODE:
1. Modules
We’ll only use one module i.e random. This module is used to place a number(2) every time a move is made to a random position where there exists no other numbers(free space). 
For now we’re assuming free space as a zero.

2. Positioning the first number(2) in the n*n matrix ( The beginning of the game)
By default every element within the n*n matrix is a zero meaning all the valid positions has a value zero. 
Then a position myArray[i][j] is generated in a random where the first number of the game is placed.

3. Printing out the values contained in the indexes starting from 0*0 to n*n
The n*n matrix is now printed meaning their values are printed. This block of implementation goes inside a loop meaning it is printed until a player looses the game or wins the game.

4. Asking a player for a move (w for up, s for down, a for left and d for right)
An input is taken from the player. The valid inputs are w, s, a and d. This part of the code also resides inside the loop mentioned earlier.

5. Calling the function
A function is now called with parameters as n*n matrix, user_input. user_input contains the input from the user(w,s,a,d).

6. The function
The previous function called takes two parameters namely myArray and user_input where myArray is the n*n matrix and user_input is the character input given by the user on the move he/she wants to make. 
According to the input taken different block of code is executed.

 

When user_input ==’s’ (this means player wants to make a downward move)
The thing to understand here is that this movement takes place in columns only. 
This means the movement shall be in downward direction.First all the places are occupied by the elements above the zeros. Then if adjacent elements are equal then the lower element gets doubled and then the above place takes zero as input,
now again elements are brought adjacent to each other in this manner a down move is executed in the code.

When user_input=’w’/’a’/’d’ ( up/ left/ right)
The similar implementation runs here as of that for user_input=’s’


9.Assigning a number to a random location where value is zero

10.If the desired win value is reached(default 2048) is reached the loop terminates and message is displayed" Congratulations ! You Won"

11.If  thers is no place for putting random 2 then the loop is terminated and the message is printed “Game Over”

The 2048 game is ready to play using python.

